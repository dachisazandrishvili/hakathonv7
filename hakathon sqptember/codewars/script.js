// easy
// ფუნქციას გადაეცემა რიცხვების მასივი. ფუნქციამ უნდა დააბრუნოს მასივის მაქსიმალურ რიცხვს 
// გამოკლებული მასივის მინიმალური რიცხვი. f([1, 2, 3, 4, 5]) = 4,  ახსნა: 5 - 1 = 4

const minMinusMax = (arr) => {
    let max = arr[0];
    let min = arr[0];

    for(let i = 0; i < arr.length; i++){
        if(arr[i] > max){
            max = arr[i]
        }
        if(arr[i] < min){
            min = arr[i]
        }
    }
    return max - min
}
// console.log(minMinusMax([6,1,2,3,4,5,-1]))


// ფუნქციას გადაეცემა String და მან უნდა დააბრუნოს ეს სთრინგი შებრუნებულად. f("abcd") = "dcba", ახსნა: სიტყვა შებრუნდა
const reverseString = (str) =>{
    let str2 = ""
    for(let i = str.length - 1; i >= 0; i--){
        str2 += str[i]
    }
    return str2
}
// console.log(reverseString("dachi"))

// ფუნქციას გადაეცემა სიტყვა და მან უნდა დააბრუნოს ეს სიტყვა შეცვლილ ფორმატში: 
// სიტყვის მეორე ნახევარი შეაერთოს სიტყვის პირველ ნახევართან და დააბრუნოს გაერთიანებული.
//  თუ სიტყვის სიგრძე კენტია, მეორე ნახევრის სიგრძე უნდა აღემატებოდეს პირველისას. 
// f("gamarjoba") = "rjobagamar", ახსნა: მეორე ნახევარს მიეწერა პირველი ნახევარი

const changeStr = (str) => {
    let firstPart = "";
    let lastPart = "";
    for(let i = 0; i < Math.round(str.length / 2); i++){
        firstPart += str[i]
    }
    let m = str.split(firstPart)
    let k = m[1];
    return k +firstPart
}
// console.log(changeStr("dachi"))

// ფუნქციას გადაეცემა რიცხვების მასივი და მან უნდა დააბრუნოს მასივის ყველაზე მაქსიმალური რიცხვი.
//  f([1, 2, 10, 3, 4, 5]) = 10, ახსნა: 10 არის ყველაზე დიდი რიცხვი ამ მასივში
const maxOfArr = (arr) =>{
    let max = arr[0];
    for(let i of arr){
        if(i > max){
            max = i;
        }
    }
    return max
}
// console.log(maxOfArr([1,2,3,4,5,6,7]))

// ფუნქციას გადაეცემა მასივი (მასივში მოცემული იქნება რიცხვები ან ტექსტური ინფორმაცია) და 
// მან უნდა დააბრუნოს ერთი String, სადაც იქნება მასივის ყველა ელემენტი.
// f(["aa", 10, "abc", 20]) = "aa10abc20", ახსნა: ყველა მასივის ელემენტი მოვათავსეთ ამ სთრინგში
function returnStr(inp) {
    let arr = inp.join('');
    arr = arr.toString();

    console.log(arr);
}

returnStr(['hi', 5, 'cc', 56]);

// hard

// ფუნქციას გადაეცემა სია. ყოველ სვლაზე მარცხვიდან მარჯვნივ იშლება ლუწი ინდექსები(0,2,4...). 
// ამის შემდეგ დარჩენილი მასივიდან ისევ იშლება მარცხნიდან მარჯვნივ ლუწი ინდექსები(0,2,4...). 
// ასე გრძელდება სანამ ყველაფერი არ წაიშლება. დააბრუნეთ სია წაშლილი რიცხვების, წაშლის თანმიმდევრობით. 
// f([4,6,3,2,7,4,5]) = [4,3,7,5,6,4,2], ახსნა: თავდაპირველი მასივი არის: [4,6,3,2,7,4,5]. 
// წაიშლება რიცხვები ინდექსებით 0,2,4,6(წაიშლება 4,6,3,2). მასივი წაშლის შემდეგ გახდება შემდეგნაირი: [6,2,4]. 
// წაიშლება რიცვხები ინდექსებით 0,2(წაიშლება 6,4). მასივი გახდება: [2]. საბოლოოდ წაიშლება რიცხვი ინდექსით 0(წაიშლება 2).

const removeOddIndex = (lst) => {
    let lst2 = [];
    while(lst.length != 0){
        for(let i = 0; i < lst.length; i++){
            if(i % 2 != 0){
                lst2.push(lst[i])
            }
        }
        lst = lst2;
        lst2 = [];
    }
    return lst;
}
console.log(removeOddIndex([1,2,3,4]))

// ფუნქციას გადაეცემა მთელი რიცხვი და მან უნდა დააბრუნოს ამ რიცხვის 
// ფაქტორიალი(2-დან ამ რიცხვის ჩათვლით, ყველა ნატურალური რიცხვის ნამრავლი). f(5) = 120, ახსნა: 120 = 2*3*4*5

const factorial = (num) =>{
    let final = 1;
    for(let i = 1; i <= num; i++){
        final *= i
    }
    return(final)
}
// console.log(factorial(5))

// ფუნქციას გადაეცემა მარტიცა. დააბრუნეთ ამ მარტიცის ყველაზე დიდი ჯამის მქონე სტრიქონის ინდექსი. 
// f([[1,4,2],[5,3,9],[4,9,2],[6,7,8]]) = 3. ახსნა: პირველი სტრიქონის ჯამია 1+4+2=7, მეორესი

const maxOfArrsInArr = (arr) => {
    let newArr = [];
    let sum = 0;
    for(let i of arr){
        for(let m = 0; m < arr.length; m++){
            sum += i[m]
        }
        newArr.push(sum)
        sum = 0
    }
    let max = newArr[0];
    for(let i of newArr){
        if(i > max){
            max = i;
        }
    }
    return max;
}
// console.log(maxOfArrsInArr([[1,2,3],[1,2,3],[1,2,4]]))

// არის რიცხვი რომელის უდრის 0-ს. ფუნქციას გადაეცემა string,
//  სვლები, რომელიც შედგება '+' და '-' ისაგნ. '+' ნიშნავს რიცხვის ერთით გაზრდას, 
//  '-' ერთით შემცირებას. დააბრუნეთ მაქსიმალური მნიშვენობა, რომელსსაც მიაღწია რიცხვმა .
//   f("+-++-+++-----+")=4. ახსნა: თავიდან რიცხვი უდრის 0-ს. პირველი string-ის ელემენტია '+' რაც რიცხვს ხდის 1-ს.
//    შემდეგი ელემტია '-', რაც რიცხვს ხდის 0-ს. ასე ვაგრძელებთ და ვამჩნევთ, რომ 8 ოპერაციაში("+-++-+++") 
// \ვღებულობთ 4-ს. რიცხვი უფრო დიდ მნიშვნელობას არ აღწევს, ამიტომაც პასუხი არის 4.

const encriceOrDecreese = (str) => {
    let num = 0;
    let lst = [];
    for(let i = 0; i < str.length; i++){
        if(str[i] === "+"){
            lst.push(1)
        }else{
            lst.push(-1)
        }
    }
    for(let i of lst){
        num += i
    }
    return num;
}
// console.log(encriceOrDecreese("+-++-+++"))

// ფუნქციას გადაეცემა პატარა ინგლისური ასოებიანი სტრიქონი(არ შეიცავს გამოტოვებებს). 
// დააბრუნეთ მაქსიმალური დისტანცია(ინდექსების სხვაობა) ორ ერთნაირ ასოს შორის. f("goaisthebest") = 6. 
// ახსნა: სტრიქონის ასო ინდექსით 4(s) უდრის ასოს ინდექსით 10(s). 
// მათ შორის დისტანციაა 10-4=6. უფრო დიდი დისტანციის მქონე ორი ერთნაირი ასო არ არსებობს.

// ver movaswari


